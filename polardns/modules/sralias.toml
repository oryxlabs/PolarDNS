[module]
name = "sralias"
type = "feature"
info = "Random SRV Aliases"
short = "SRV random alias generator"
category = "Aliases"
records = "SRV"
tags = "Amplification, Domain Lock-Up, Denial of Service"
rfc = "RFC2782, RFC8552, RFC8553"
desc = '''
This module is designed to return one or more **random aliases** using **SRV (Service Locator)** records.

It specifically generates a random SRV alias record in the format `sralias######.yourdomain.com`, where `######` represents a random number.

The idea is that if the client/resolver decides to resolve this further, it will result in the generation of yet another alias, theoretically leading to a resolution of infinite chain of random aliases. In practice, however, most modern resolvers will terminate the resolution after encountering several consecutive alias records.

Note that SRV records include fields for Priority, Weight, and Port number. In this module, both the Priority and Weight are set to 0, while the Port number is randomly generated for each record.

Additionally, the module supports DNS queries for locating different services using the underscore (_) prefix notation, also known as Attrleaf naming pattern, service labels, or underscore labels ([RFC8552](https://datatracker.ietf.org/doc/rfc8552/), [RFC8553](https://datatracker.ietf.org/doc/rfc8553/)).

Note that this feature provides the same functionality as requesting the SRV record for the generic [alias] feature. Responding with multiple records (aliases) in a single response is also supported.

:warning:**BEWARE**:warning:This can potentially lead to amplification effect (DoS) or domain lock-up (DoS).
'''
format = '''
**`sralias.<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter defines how many aliases should be generated in the response.
'''
seealso = "srloop, srchain, alias, cnalias, dnalias, htalias, mxalias, nptenumalias, nsalias, ptralias, spfalias1, spfalias2, sralias, svalias"

[[module.example]]
description = "By default, the module generates a single SRV alias record response:"
command = "dig sralias.yourdomain.com @127.0.0.1"

[[module.example]]
description = "Same example as above, but this time we explicitly specify that we want to receive a single SRV record:"
command = "dig sralias.1.yourdomain.com @127.0.0.1"

[[module.example]]
description = "In this case, we specify that we want to receive 5 (five) SRV alias records:"
command = "dig sralias.5.yourdomain.com @127.0.0.1"

[[module.example]]
description = "As mentioned in the description, this module also supports DNS queries for locating different services using the underscore (_) prefix notation. In this example, we search for SIP (Session Initiation Protocol) service. We request to receive a single SRV alias record:"
command = "dig _sip.sralias.yourdomain.com @127.0.0.1"

[[module.example]]
description = "Here, we search for SIP service running over UDP, and we want to receive 2 (two) SRV alias records:"
command = "dig _sip._udp.sralias.2.yourdomain.com @127.0.0.1"

[[module.example]]
description = "Here, we search for HTTP service running over TCP, and we request to receive 10 (ten) SRV alias records:"
command = "dig _http._tcp.sralias.10.yourdomain.com @127.0.0.1"

[[module.example]]
description = "Here, we search for HTTP service specifically designed for mobile devices, running over TCP. We request to receive 20 (twenty) SRV alias records in the response:"
command = "dig _mobile._http._tcp.sralias.20.yourdomain.com @127.0.0.1"

[module.code]
python = '''
           elif req.first_subdomain.startswith("sralias"):
              # Send multiple random SRV aliases (RFC 2782).
              # BEWARE: This could result in multiplication
              answers = min(int(req.subdomains[1]), 4096) if req.subdomains[1].isnumeric() else 1
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, answers, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              doms = []
              for i in range(answers):
                  # SRV alias records
                  dom = name_fuzz(resp.nfz) if hasattr(resp, "nfz") else random_chain()
                  port = random.getrandbits(16)
                  bindom = convDom2Bin(dom)
                  data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
                  buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
                  buffer += getTypeBin("SRV") + getClassBin("IN")
                  buffer += struct.pack(">L", resp.TTL)    ## TTL
                  buffer += struct.pack(">H", data_len)    ## Data length
                  buffer += struct.pack(">H", 0)           ## Priority
                  buffer += struct.pack(">H", 0)           ## Weight
                  buffer += struct.pack(">H", port)        ## Port
                  buffer += bindom                         ## TargetName
                  doms.append(dom)
              # log and send
              log("%d SRV aliases: %s" % (answers, ', '.join(map(str, doms[:3])) + (', ...' if answers > 3 else '')))
              send_buf(self, buffer)
              #####################################################################
           elif req.first_subdomain.startswith("_") and (req.subdomains[1].startswith("sralias") or req.subdomains[2].startswith("sralias") or (len(req.subdomains) > 3 and req.subdomains[3].startswith("sralias"))):
              # Send multiple random SRV aliases (RFC 2782) for any domain name with attribute leaves 
              # (domains prefixed with an underscore), up to 3 levels e.g., '_sub._service._proto.sralias...'
              # BEWARE: This could result in multiplication
              offset = 1      # _a.sralias.10.yourdomain.com
              if req.subdomains[2].startswith("sralias"):
                 offset = 2   # _a._b.sralias.10.yourdomain.com
              elif req.subdomains[3].startswith("sralias"):
                 offset = 3   # _a._b._c.sralias.10.yourdomain.com
              answers = min(int(req.subdomains[offset+1]), 4096) if req.subdomains[offset+1].isnumeric() else 1
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, answers, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              doms = []
              for i in range(answers):
                  # SRV alias records
                  dom = name_fuzz(resp.nfz) if hasattr(resp, "nfz") else random_chain()
                  port = random.getrandbits(16)
                  bindom = convDom2Bin(dom)
                  data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
                  buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
                  buffer += getTypeBin("SRV") + getClassBin("IN")
                  buffer += struct.pack(">L", resp.TTL)    ## TTL
                  buffer += struct.pack(">H", data_len)    ## Data length
                  buffer += struct.pack(">H", 0)           ## Priority
                  buffer += struct.pack(">H", 0)           ## Weight
                  buffer += struct.pack(">H", port)        ## Port
                  buffer += bindom                         ## TargetName
                  doms.append(dom)
              # log and send
              log("%d SRV aliases: %s" % (answers, ', '.join(map(str, doms[:3])) + (', ...' if answers > 3 else '')))
              send_buf(self, buffer)
              #####################################################################
'''
