[module]
name = "mxchain"
type = "feature"
info = "MX Alias Chains"
short = "MX chain alias generator"
category = "Alias chains"
records = "MX"
tags = "Domain Lock-Up, Denial of Service"
rfc = "RFC1035"
desc = '''
This module implements **incremental alias chains** using **MX (Mail Exchange)** records. It returns an alias record with an incremented domain name index, forming a chain that continues to increment indefinitely.

Specifically, this module generates a MX alias record in the format `mxchain###.yourdomain.com`, where `###` represents the incremented index.

The concept is that if the client/resolver attempts to resolve this alias further, it will generate yet another incremented alias, causing the process to continue indefinitely and potentially keeping the resolver occupied.

However, in practice, most modern resolvers detect such chains and terminate the resolution after encountering a certain number of consecutive aliases (e.g., 20 aliases) or upon reaching a specified time limit for the resolution (e.g., 30 seconds).

Note that this feature provides the same functionality as requesting a MX record for the generic [chain] feature.

:warning:**BEWARE**:warning:This could potentially lead to a **domain lock-up (DoS)**.
'''
format = '''
**`mxchain<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter specifies an arbitrary number that will be incremented in the response.
'''
seealso = "mxalias, mxloop, chain, cnchain, dnchain, htchain, mxchain, nschain, spfchain, srchain, svchain"

[[module.example]]
description = "By default, the module generates an MX alias record with the index of 1:"
command = "dig mxchain.yourdomain.com @127.0.0.1"

[[module.example]]
description = "If we attempt to resolve the resulting domain name (`mxchain1.yourdomain.com`), we receive an incremented alias record:"
command = "dig mxchain1.yourdomain.com @127.0.0.1"

[[module.example]]
description = "If we continue to resolve the next domain name (`mxchain2.yourdomain.com`), we again receive an incremented alias record:"
command = "dig mxchain2.yourdomain.com @127.0.0.1"

[[module.example]]
description = "This resolution process can continue indefinitely, as there are no limits on the size of the index number. Each resolution yields another incremented alias record:"
command = "dig mxchain9999999999999999999999999.yourdomain.com @127.0.0.1"
append = "The domain name will never be fully resolved as the incremental process continues indefinitely."

[module.code]
python = '''
           elif req.first_subdomain.startswith("mxchain"):
              # Send incremented MX alias record.
              new_domain_name = increment_chain()
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              # MX alias record
              bindom = convDom2Bin(new_domain_name)
              data_len = 2+len(bindom)                 # Priority (2 bytes) + Target domain
              buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
              buffer += getTypeBin("MX") + getClassBin("IN")
              buffer += struct.pack(">L", resp.TTL)    ## TTL
              buffer += struct.pack(">H", data_len)    ## Data length
              buffer += struct.pack(">H", 0)           ## Priority
              buffer += bindom                         ## TargetName
              # log and send
              log("MX %s" % (new_domain_name))
              send_buf(self, buffer)
              #####################################################################
'''
