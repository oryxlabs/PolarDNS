[module]
name = "loop"
type = "feature"
info = "Alias Loops"
short = "Alias loop generator supporting multiple record types"
category = "Alias loops"
records = "NS, MX, SRV, TXT, SPF, SVCB, HTTPS, CNAME, DNAME"
tags = "Domain Lock-Up, Denial of Service"
desc = '''
This module implements **alias loops** in DNS using variety of different record (resource) types. It supports the following record types:

- CNAME (Canonical Name)
- DNAME (Delegation Name)
- HTTPS (HyperText Transfer Protocol Secure)
- SVCB (Service Binding)
- SPF (Sender Policy Framework)
- SRV (Service Locator)
- MX (Mail Exchange)
- NS (Name Server)

The loops can be a **direct loop**, where the alias points back to the same domain name as in the original query, or they can include **multiple elements**, cycling through a specified number of domains.

The idea is that if the client/resolver decides to resolve the response further, it will enter an **infinite loop**. In practice, however, most modern resolvers detect such loops and terminate the resolution.

:warning:**BEWARE**:warning:This can potentially lead to a domain lock-up (DoS).
'''
format = '''
**`loop.<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter specifies the number of elements the loop should contain.
'''
seealso = "alias, chain, cnloop, dnloop, htloop, loop, mxloop, nptenumloop, nsloop, ptrloop1, ptrloop2, spfloop, srloop, svloop"
rfc = "RFC1034, RFC1035, RFC2672, RFC2782, RFC2915, RFC3761, RFC4408, RFC6672, RFC7208, RFC9460"

[[module.example]]
description = "By default, the module generates a direct CNAME alias loop:"
command = "dig loop.yourdomain.com @127.0.0.1"
append = "We can see that the CNAME alias points to the same domain name, effectively forming a direct loop."

[[module.example]]
description = "Like other features, you can append anything to the feature name to avoid receiving cached responses from the target DNS resolver. This forces the target resolver to actively communicate with our PolarDNS server instead of responding with cached answers. Using a random number is the most effective strategy:"
command = "dig loop${RANDOM}.yourdomain.com @10.211.55.2"

[[module.example]]
description = "In this example, we request a MX alias loop consisting of 5 elements:"
command = "dig MX loop.5.yourdomain.com @127.0.0.1"
append = "The resulting domain name `loop.5.1.yourdomain.com` represents the 1st element of the loop."

[[module.example]]
description = "By resolving the 1st element, we are pointed to the 2nd element of the loop:"
command = "dig MX loop.5.1.yourdomain.com @127.0.0.1"
append = "This continues up to the 5th and final element - `loop.5.5.yourdomain.com`."

[[module.example]]
description = "By resolving the final element of the loop, we are directed back to the 1st element again:"
command = "dig MX loop.5.5.yourdomain.com @127.0.0.1"
append = "We can see that we are indeed pointed back to the 1st element again, forming a loop."

[[module.example]]
description = "In this example, we request an SPF alias loop consisting of 10 elements. Since SPF records are published within TXT records in DNS, we request a TXT record in this case:"
command = "dig TXT loop.10.yourdomain.com @127.0.0.1"
append = "The resulting domain name `loop.10.1.yourdomain.com` represents the 1st element of the loop."

[[module.example]]
description = "By resolving the 1st element, we are pointed to the 2nd element of the loop:"
command = "dig TXT loop.10.1.yourdomain.com @127.0.0.1"
append = "This continues up to the 10th and final element - `loop.10.10.yourdomain.com`."

[[module.example]]
description = "By resolving the final element of the loop, we are directed back to the 1st element again:"
command = "dig TXT loop.10.10.yourdomain.com @127.0.0.1"
append = "We can see that we are indeed pointed back to the 1st element again, forming a loop."


[module.code]
python = '''
if req.first_subdomain.startswith("loop"):
   # Do an alias loop in a CNAME/DNAME/HTTPS/SVCB/SRV/MX/NS/SPF(TXT) record type
   if req.subdomains[1].isnumeric() and req.subdomains[2].isnumeric():
      # we are already in a loop, e.g.:
      # loop.10.4.yourdomain.com
      max = int(req.subdomains[1])
      cur = int(req.subdomains[2])
      if cur >= max:
         # go back to the beginning of the loop
         new_domain_name = req.subdomains_20[0] + "." + str(max) + ".1"
      else:
         # increment the current index
         new_domain_name = req.subdomains_20[0] + "." + str(max) + "." + str(cur+1)
      for i in range(len(req.subdomains)-3):
         new_domain_name += "." + req.subdomains_20[i+3]
   elif req.subdomains[1].isnumeric():
      # we are in beginning of a loop with a requested max value, e.g.:
      # loop.10.yourdomain.com
      max = int(req.subdomains[1])
      if max < 1:
         max = 1
      new_domain_name = req.subdomains_20[0] + "." + str(max) + "." + "1"
      for i in range(len(req.subdomains)-2):
         new_domain_name += "." + req.subdomains_20[i+2]
   else:
      # just immediate loop
      new_domain_name = req.full_domain_20
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   bindom = convDom2Bin(new_domain_name)
   match req.type_str:
      case "DNAME":
         type = "DNAME"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("DNAME") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(bindom))  ## Data length
         buffer += bindom                          ## DNAME value
      case "HTTPS":
         type = "HTTPS"
         data_len = 2+len(bindom)                  # SvcPriority (2 bytes) + the target name
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("HTTPS") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## SvcPriority (0 means alias mode - RFC 9460)
         buffer += bindom                          ## TargetName
      case "SVCB":
         type = "SVCB"
         data_len = 2+len(bindom)                  # SvcPriority (2 bytes) + the target name
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("SVCB") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## SvcPriority (0 means alias mode - RFC 9460)
         buffer += bindom                          ## TargetName
      case "SRV":
         type = "SRV"
         port = random.getrandbits(16)
         data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("SRV") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## Priority
         buffer += struct.pack(">H", 0)            ## Weight
         buffer += struct.pack(">H", port)         ## Port
         buffer += bindom                          ## TargetName
      case "MX":
         type = "MX"
         data_len = 2+len(bindom)                  # Priority (2 bytes) + Target domain
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("MX") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## Priority
         buffer += bindom                          ## TargetName
      case "NS":
         type = "NS"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("NS") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(bindom))  ## Data length
         buffer += bindom                          ## NS value
      case "TXT":
         type = "SPF(TXT)"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         data = "v=spf1 include:" + new_domain_name + " ~all"
         buffer += getTypeBin("TXT") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(data)+1)  ## Data length (2B)
         buffer += struct.pack(">B", len(data))    ## TXT length (1B)
         buffer += data.encode("utf-8")            ## TXT SPF value
      case _:
         type = "CNAME"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
         buffer += getTypeBin("CNAME") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(bindom))  ## Data length
         buffer += bindom                          ## DNAME value
   # log and send
   log("%s LOOP %s" % (type, new_domain_name))
   send_buf(self, buffer)
   #####################################################################
'''
