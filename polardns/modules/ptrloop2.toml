[module]
name = "ptrloop2"
type = "feature"
info = "PTR Alias Loops (Variant 2)"
short = "PTR loop alias generator (variant 2)"
category = "Alias loops"
records = "PTR"
tags = "Domain Lock-Up, Denial of Service"
rfc = "RFC1035"
desc = '''
This module implements **alias loops** using **reverse DNS lookups (PTR records)**, which map IP addresses back to domain names.

It specifically handles reverse DNS queries for any IP address within the `198.51.100.0/24` private network range, known as TEST-NET-2, which is typically used for documentation and examples.

When this module receives a reverse DNS lookup query for an IP address such as `198.51.100.x` (this means searching for the PTR record for `x.100.51.198.in-addr.arpa` domain), it responds with a PTR record with incremented domain name, cycling through addresses from `198.51.100.0` to `198.51.100.255` indefinitely, effectively creating a **loop**.

:warning:**BEWARE**:warning:This could potentially lead to a domain lock-up (DoS).
'''
seealso = "ptralias, cnloop, dnloop, htloop, loop, mxloop, nptenumloop, nsloop, ptrloop1, ptrloop2, spfloop, srloop, svloop"
format = '''
**`*.100.51.198.in-addr.arpa`**

This module has no parameters.
'''

[[module.example]]
description = "In this example, we perform a reverse lookup for the IP address `198.51.100.0`, which is the 1st element of the loop. The result is an incremented IP address (`192.51.100.1`) in in-addr.arpa format:"
command = "dig -x 198.51.100.0 @127.0.0.1"
append = "This incrementation continues up to the last IP address (the final element) - `192.51.100.255` (or `255.100.51.198.in-addr.arpa` in in-addr.arpa format)."

[[module.example]]
description = "By resolving the final element of the loop, we are directed back to the 1st element again:"
command = "dig -x 198.51.100.255 @127.0.0.1"
append = "This setup effectively creates a loop."

[module.code]
python = '''
           elif req.full_domain.endswith(".100.51.198.in-addr.arpa"):
              # Asking for a reverse record for the IP address 198.51.100.x (x.100.51.198.in-addr.arpa PTR record).
              # The 198.51.100.0/24 network range is TEST-NET-2 typically used for documentation/examples.
              # Let's respond back with the incremented domain name, all the way up to 198.51.100.255 and then
              # back to 198.51.100.0 indefinitely, effectively creating a loop.
              host = int(req.first_subdomain)
              host = 0 if host >= 255 else host + 1
              dom = str(host) + "." + ".".join(req.subdomains_20[1:])
              bindom = convDom2Bin(dom)
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              # PTR alias records
              buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
              buffer += getTypeBin("PTR") + getClassBin("IN")
              buffer += struct.pack(">L", resp.TTL)    ## TTL
              buffer += struct.pack(">H", len(bindom)) ## Data length
              buffer += bindom                         ## TargetName
              # log and send
              log("PTR %s" % (dom))
              send_buf(self, buffer)
              #####################################################################
'''
