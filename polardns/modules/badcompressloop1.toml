[module]
name = "badcompressloop1"
type = "feature"
info = "Pointer Loop in Name Field (Variant 1)"
short = "Compression pointer loop in the Name field (variant 1)"
category = "Bad compression"
records = "CNAME"
rfc = "RFC1035"
desc = '''
The DNS protocol supports compressing domain names to save space by reducing redundancy for repeated domain names within DNS messages. This compression scheme can be applied to various record (resource) types, such as **A**, **CNAME**, **MX**, or **PTR** records.

This particular module is designed to respond with a single answer containing a **CNAME record** (alias) where the **Name field** is compressed.

The compression pointer in the **Name field** points to **itself**, forming a **direct loop**.
'''
format = '''
**`badcompressloop1.yourdomain.com`**

This module has no parameters.
'''
seealso = "badcompress1, badcompress2, badcompressfwptr1, badcompressfwptr2, badcompressloop1, badcompressloop2, badcompressloop3, badcompressloop4, badcompressloop5, badcompressmid1"

[[module.example]]
description = "In this example, we can see that the client (dig) is unable to process the response because of the compression loop:"
command = "dig badcompressloop1.yourdomain.com @127.0.0.1"
append = "By examining the PCAP file in Wireshark, we can see that it detects the loop and displays the error message `<Name contains a pointer that loops>` while parsing the field. However, different DNS resolvers and clients may handle such malformed responses in vastly different ways, making this an intriguing use case for testing."

[[module.example]]
description = "Like other features, you can append anything to the feature name to avoid receiving cached responses from the target DNS resolver. This forces the target resolver to actively communicate with our PolarDNS server instead of responding with cached answers. Using a random number is the most effective strategy:"
command = "dig badcompressloop1${RANDOM}.yourdomain.com @10.211.55.2"

[module.code]
python = '''
if req.first_subdomain.startswith("badcompressloop1"):
   # Send answer with a compression pointer loop in the Answer name - variant 1
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # CNAME
   offset_to_middle_name = len(req.full_domain) + 18   ## forward pointer to the name in the middle
   baddom = b"\xc0" + struct.pack(">B", offset_to_middle_name)
   buffer += baddom + getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   dom = "always" + str(random.getrandbits(20) % 100000) + "." + req.sld_tld_domain
   buffer += struct.pack(">H", len(dom)+2)              ## Data length
   buffer += convDom2Bin(dom)                           ## CNAME value
   # log and send
   log("CNAME %s (badcomp loop 1, answer Name, <LOOP>)" % (dom))
   send_buf(self, buffer)
   #####################################################################
'''
