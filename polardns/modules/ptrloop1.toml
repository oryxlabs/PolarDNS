[module]
name = "ptrloop1"
type = "feature"
info = "PTR Alias Loops (Variant 1)"
short = "PTR loop alias generator (variant 1)"
category = "Alias loops"
records = "PTR"
tags = "Domain Lock-Up, Denial of Service"
rfc = "RFC1035"
desc = '''
This module implements **alias loops** using **reverse DNS lookups (PTR records)**, which map IP addresses back to domain names.

It specifically handles reverse DNS queries for any IP address within the `192.0.2.0/24` private network range, known as TEST-NET-1, which is typically used for documentation and examples.

When this module receives a reverse DNS lookup query for an IP address such as `192.0.2.x` (this means searching for the PTR record for `x.2.0.192.in-addr.arpa` domain), it responds with a PTR record that contains the exact same domain name, effectively creating a **direct loop**.

:warning:**BEWARE**:warning:This could potentially lead to a domain lock-up (DoS).
'''
seealso = "ptralias, cnloop, dnloop, htloop, loop, mxloop, nptenumloop, nsloop, ptrloop1, ptrloop2, spfloop, srloop, svloop"
format = '''
**`*.2.0.192.in-addr.arpa`**

This module has no parameters.
'''

[[module.example]]
description = "In this example, we perform a reverse lookup for the IP address `192.0.2.100`. The result is the same domain name in in-addr.arpa format, creating a direct loop:"
command = "dig -x 192.0.2.100 @127.0.0.1"

[[module.example]]
description = "The same query as above, but written in in-addr.arpa format. The result is idential, producing a direct loop:"
command = "dig PTR 100.2.0.192.in-addr.arpa @127.0.0.1"

[module.code]
python = '''
           elif req.full_domain.endswith(".2.0.192.in-addr.arpa"):
              # Asking for a reverse record for the IP address 192.0.2.x (x.2.0.192.in-addr.arpa PTR record).
              # The 192.0.2.0/24 network range is TEST-NET-1 typically used for documentation/examples.
              # Let's respond back with the same exact domain name, effectively creating an immediate loop.
              bindom = b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              # PTR alias records
              buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
              buffer += getTypeBin("PTR") + getClassBin("IN")
              buffer += struct.pack(">L", resp.TTL)    ## TTL
              buffer += struct.pack(">H", len(bindom)) ## Data length
              buffer += bindom                         ## TargetName
              # log and send
              log("PTR loop %s" % (req.full_domain_20))
              send_buf(self, buffer)
              #####################################################################
'''
