[module]
name = "badcompressloop3"
type = "feature"
info = "Double Pointer Loop"
short = "Double compression pointer loop in the Name field"
category = "Bad compression"
records = "CNAME"
rfc = "RFC1035"
desc = '''
The DNS protocol supports compressing domain names to save space by reducing redundancy for repeated domain names within DNS messages. This compression scheme can be applied to various record (resource) types, such as **A**, **CNAME**, **MX**, or **PTR** records.

This particular module is designed to respond with a single answer containing a **CNAME record** (alias) where the **Name field** is compressed, and the **CNAME field** is partially compressed.

The **Name field** consists solely of a compression pointer that points forward to the **CNAME field** located at the end of the packet.

The **CNAME field** contains only the `abc` string (a beginning of a domain name) followed by a compression pointer that points back to the **Name field**.

This arrangement effectively creates a **loop**, preventing either field from being assembled into a valid domain name.
'''
format = '''
**`badcompressloop3.yourdomain.com`**

This module has no parameters.
'''
seealso = "badcompress1, badcompress2, badcompressfwptr1, badcompressfwptr2, badcompressloop1, badcompressloop2, badcompressloop3, badcompressloop4, badcompressloop5, badcompressmid1"

[[module.example]]
description = "In this example, we can see that the client (dig) is unable to process the response because of the compression loop:"
command = "dig badcompressloop3.yourdomain.com @127.0.0.1"
append = "By examining the PCAP file in Wireshark, we can see that it detects the loops and displays the error message `<Name contains a pointer that loops>` while parsing the fields. However, different DNS resolvers and clients may handle such malformed responses in vastly different ways, making this an intriguing use case for testing."

[[module.example]]
description = "Like other features, you can append anything to the feature name to avoid receiving cached responses from the target DNS resolver. This forces the target resolver to actively communicate with our PolarDNS server instead of responding with cached answers. Using a random number is the most effective strategy:"
command = "dig badcompressloop3${RANDOM}.yourdomain.com @10.211.55.2"

[module.code]
python = '''
if req.first_subdomain.startswith("badcompressloop3"):
   # Send answer with a compression pointer loop involving a forward pointer and a backward pointer
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # CNAME
   offset_to_last_cname = len(req.full_domain) + 12 + 18     ## forward pointer to the CNAME in the end
   buffer += b"\xc0" + struct.pack(">B", offset_to_last_cname) + getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   offset_to_middle_name = len(req.full_domain) + 18         ## backward pointer to the name in the middle
   dom = b"\x03abc" + b"\xc0" + struct.pack(">B", offset_to_middle_name)
   buffer += struct.pack(">H", len(dom))                ## Data length
   buffer += dom                                        ## CNAME value
   # log and send
   log("CNAME abc.<LOOP> (badcomp loop 3 in the answer Name and CNAME)")
   send_buf(self, buffer)
   #####################################################################
'''
