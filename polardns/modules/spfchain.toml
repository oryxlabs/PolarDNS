[module]
name = "spfchain"
type = "feature"
info = "SPF (TXT) Alias Chains"
short = "SPF (TXT) chain alias generator"
category = "Alias chains"
records = "TXT, SPF"
tags = "Domain Lock-Up, Denial of Service"
rfc = "RFC4408, RFC7208"
desc = '''
This module implements **incremental alias chains** using **SPF (Sender Policy Framework)** records. It returns an alias record with an incremented domain name index, forming a chain that continues to increment indefinitely.

Specifically, this module generates a SPF alias record in the format `spfchain###.yourdomain.com`, where `###` represents the incremented index.

The concept is that if the client/resolver attempts to resolve this alias further, it will generate yet another incremented alias, causing the process to continue indefinitely and potentially keeping the resolver occupied.

However, in practice, most modern resolvers detect such chains and terminate the resolution after encountering a certain number of consecutive aliases (e.g., 20 aliases) or upon reaching a specified time limit for the resolution (e.g., 30 seconds).

The SPF protocol is used to specify which mail servers are authorized to send emails on behalf of a domain, and SPF records are typically published within TXT records in DNS.

Note that this feature provides the same functionality as requesting a TXT record for the generic [chain] feature.

:warning:**BEWARE**:warning:This could potentially lead to a **domain lock-up (DoS)**.
'''
format = '''
**`spfchain<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter specifies an arbitrary number that will be incremented in the response.
'''
seealso = "spfalias1, spfalias2, spfloop, chain, cnchain, dnchain, htchain, mxchain, nschain, spfchain, srchain, svchain"

[[module.example]]
description = "By default, the module generates an SPF alias record with the index of 1:"
command = "dig spfchain.yourdomain.com @127.0.0.1"

[[module.example]]
description = "If we attempt to resolve the resulting domain name (`spfchain1.yourdomain.com`), we receive an incremented alias record:"
command = "dig spfchain1.yourdomain.com @127.0.0.1"

[[module.example]]
description = "If we continue to resolve the next domain name (`spfchain2.yourdomain.com`), we again receive an incremented alias record:"
command = "dig spfchain2.yourdomain.com @127.0.0.1"

[[module.example]]
description = "This resolution process can continue indefinitely, as there are no limits on the size of the index number. Each resolution yields another incremented alias record:"
command = "dig spfchain9999999999999999999999999.yourdomain.com @127.0.0.1"
append = "The domain name will never be fully resolved as the incremental process continues indefinitely."

[module.code]
python = '''
if req.first_subdomain.startswith("spfchain"):
   # Send incremented SPF(TXT) alias
   new_domain_name = increment_chain()
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # TXT SPF
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
   data = "v=spf1 include:" + new_domain_name + " ~all"
   buffer += getTypeBin("TXT") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)       ## TTL
   buffer += struct.pack(">H", len(data)+1)    ## Data length (2B)
   buffer += struct.pack(">B", len(data))      ## TXT length (1B)
   buffer += data.encode("utf-8")              ## TXT SPF value
   # log and send
   log("SPF(TXT) %s" % (new_domain_name))
   send_buf(self, buffer)
   #####################################################################
'''
