[module]
name = "mxloop"
type = "feature"
info = "MX Alias Loops"
short = "MX loop alias generator"
category = "Alias loops"
records = "MX"
tags = "Domain Lock-Up, Denial of Service"
rfc = "RFC1035"
desc = '''
This module implements **alias loops** using **MX (Mail Exchange)** records. The loops can be a **direct loop**, where the alias points back to the **same domain name** as in the original query, or they can include **multiple elements**, cycling through a specified number of domains.

The idea is that if the client/resolver decides to resolve this further, it will enter an **infinite loop**. In practice, however, most modern resolvers detect such loops and terminate the resolution.

Note that this feature provides the same functionality as requesting a MX record for the generic [loop] feature.

:warning:**BEWARE**:warning:This can potentially lead to a domain lock-up (DoS).
'''
format = '''
**`mxloop.<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter specifies the number of elements the loop should contain.
'''
seealso = "mxalias, mxchain, cnloop, dnloop, htloop, loop, mxloop, nptenumloop, nsloop, ptrloop1, ptrloop2, spfloop, srloop, svloop"

[[module.example]]
description = "In this example, we see a direct loop formed by sending a query that results in a MX record containing the exact same domain name as the one in the query:"
command = "dig mxloop.yourdomain.com @127.0.0.1"

[[module.example]]
description = "In this example, we request a MX alias loop consisting of 5 elements:"
command = "dig mxloop.5.yourdomain.com @127.0.0.1"
append = "The resulting domain name `mxloop.5.1.yourdomain.com` represents the 1st element of the loop."

[[module.example]]
description = "By resolving the 1st element, we are pointed to the 2nd element of the loop:"
command = "dig mxloop.5.1.yourdomain.com @127.0.0.1"
append = "This continues up to the 5th and final element - `mxloop.5.5.yourdomain.com`."

[[module.example]]
description = "By resolving the final element of the loop, we are directed back to the 1st element again:"
command = "dig mxloop.5.5.yourdomain.com @127.0.0.1"
append = "We can see that we are indeed pointed back to the 1st element again, forming a loop."

[module.code]
python = '''
if req.first_subdomain.startswith("mxloop"):
   # Do an alias loop in a MX record
   if req.subdomains[1].isnumeric() and req.subdomains[2].isnumeric():
      # we are already in a loop, e.g.:
      # mxloop.10.4.yourdomain.com
      max = int(req.subdomains[1])
      cur = int(req.subdomains[2])
      if cur >= max:
         # go back to the beginning of the loop
         new_domain_name = req.subdomains_20[0] + "." + str(max) + ".1"
      else:
         # increment the current index
         new_domain_name = req.subdomains_20[0] + "." + str(max) + "." + str(cur+1)
      for i in range(len(req.subdomains)-3):
         new_domain_name += "." + req.subdomains_20[i+3]
   elif req.subdomains[1].isnumeric():
      # we are in beginning of a loop with a requested max value, e.g.:
      # mxloop.10.yourdomain.com
      max = int(req.subdomains[1])
      if max < 1:
         max = 1
      new_domain_name = req.subdomains_20[0] + "." + str(max) + "." + "1"
      for i in range(len(req.subdomains)-2):
         new_domain_name += "." + req.subdomains_20[i+2]
   else:
      # just immediate loop
      new_domain_name = req.full_domain_20
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   bindom = convDom2Bin(new_domain_name)
   data_len = 2+len(bindom)                 # Priority (2 bytes) + Target domain
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
   buffer += getTypeBin("MX") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)    ## TTL
   buffer += struct.pack(">H", data_len)    ## Data length
   buffer += struct.pack(">H", 0)           ## Priority
   buffer += bindom                         ## TargetName
   # log and send
   log("MX LOOP %s" % (new_domain_name))
   send_buf(self, buffer)
   #####################################################################
'''
