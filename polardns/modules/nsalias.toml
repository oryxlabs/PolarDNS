[module]
name = "nsalias"
type = "feature"
info = "Random NS Aliases"
short = "NS random alias generator"
category = "Aliases"
records = "NS"
tags = "Amplification, Domain Lock-Up, Denial of Service"
rfc = "RFC1035"
desc = '''
This module is designed to return one or more **random aliases** using **NS (Name Server)** records.

It specifically generates a random NS alias record in the format `nsalias######.yourdomain.com`, where `######` represents a random number.

The idea is that if the client/resolver decides to resolve this further, it will result in the generation of yet another alias, theoretically leading to a resolution of infinite chain of random aliases. In practice, however, most modern resolvers will terminate the resolution after encountering several consecutive alias records.

Note that this feature provides the same functionality as requesting the NS record for the generic [alias] feature. Responding with multiple records (aliases) in a single response is also supported.

:warning:**BEWARE**:warning:This can potentially lead to amplification effect (DoS) or domain lock-up (DoS).
'''
format = '''
**`nsalias.<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter defines how many aliases should be generated in the response.
'''
seealso = "nsloop, nschain, alias, cnalias, dnalias, htalias, mxalias, nptenumalias, nsalias, ptralias, spfalias1, spfalias2, sralias, svalias"

[[module.example]]
description = "By default, it returns a single NS alias:"
command = "dig nsalias.yourdomain.com @127.0.0.1"

[[module.example]]
description = "Same example as above, but this time we explicitly specify that we want to receive a single NS record:"
command = "dig nsalias.1.yourdomain.com @127.0.0.1"

[[module.example]]
description = "In this case, we specify that we want to receive five NS aliases:"
command = "dig nsalias.5.yourdomain.com @127.0.0.1"

[module.code]
python = '''
           elif req.first_subdomain.startswith("nsalias"):
              # Send multiple random NS aliases
              # BEWARE: This could result in multiplication
              answers = min(int(req.subdomains[1]), 4096) if req.subdomains[1].isnumeric() else 1
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, answers, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              doms = []
              for i in range(answers):
                  # NS
                  dom = name_fuzz(resp.nfz) if hasattr(resp, "nfz") else random_chain()
                  bindom = convDom2Bin(dom)
                  buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
                  buffer += getTypeBin("NS") + getClassBin("IN")
                  buffer += struct.pack(">L", resp.TTL)      ## TTL
                  buffer += struct.pack(">H", len(bindom))   ## Data length
                  buffer += bindom                           ## NS value
                  doms.append(dom)
              # log and send
              log("%d NS aliases: %s" % (answers, ', '.join(map(str, doms[:3])) + (', ...' if answers > 3 else '')))
              send_buf(self, buffer)
              #####################################################################
'''
