[module]
name = "nptenumloop"
type = "feature"
info = "NAPTR ENUM Alias Loops"
short = "NAPTR ENUM loop alias generator"
category = "Alias loops"
records = "NAPTR"
tags = "Domain Lock-Up, Denial of Service"
rfc = "RFC2915, RFC3761"
desc = '''
This module implements **alias loops** using **NAPTR (Naming Authority Pointer) ENUM** records, which are used to map identifiers like telephone numbers to a variety of service URIs, including SIP addresses, voicemail systems, and web or email addresses.

This module is specifically designed to handle DNS queries that translate telephone numbers into SIP service URIs using the E.164 format. In this format, a phone number such as `1234567890` is transformed into the reversed sequence `0.9.8.7.6.5.4.3.2.1.e164.arpa`. This domain is then queried in DNS to identify the corresponding designated SIP service address.

When this module receives a NAPTR DNS query for translating a telephone number ending with the digit `2`, it will generate a response with a SIP service URI. This URI will point to the **same domain name** as in the original query, effectively creating a **direct loop**.

While NAPTR ENUM records do not contain aliases like CNAME records, this could achieve similar results by prompting the client to perform consecutive queries to resolve it.

:warning:**BEWARE**:warning:This can potentially lead to a domain lock-up (DoS).
'''
format = '''
**`2.*.e164.arpa`**

This module has no parameters.
'''
seealso = "nptenumalias, cnloop, dnloop, htloop, loop, mxloop, nptenumloop, nsloop, ptrloop1, ptrloop2, spfloop, srloop, svloop"

[[module.example]]
description = "In this example, we look up the telephone number `8765432`. As a result, we receive a response containing a SIP URI pointing to the exact same phone number, formatted as an E.164 address:"
command = "dig NAPTR 2.3.4.5.6.7.8.e164.arpa @127.0.0.1"
append = "This effectively creates a direct loop if the client attempts to resolve it further."

[module.code]
python = '''
           elif req.first_subdomain == "2" and req.full_domain.endswith(".e164.arpa"):
              # Requesting to translate an E.164 telephone number ending with the digit 2 (e.g., a NAPTR
              # record for 2.<anything>.e164.arpa in reverse). The response will be a SIP service URI
              # pointing to the same exact E.164 telephone number, effectively creating a direct loop.
              # While NAPTR ENUM records do not contain aliases like CNAME records, this could achieve
              # similar results by prompting the client to perform consecutive queries to resolve it.
              # BEWARE: This could potentially lead to a domain lock-up (DoS)

              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              order       = 0
              pref        = 0
              flags       = b'U'          # Flags = "U" (URI)
              service     = b'E2U+sip'    # Service = SIP
              regex       = bytes("!^.*$!" + req.full_domain_20 + "!", "utf-8")
              replacement = b'\x00'

              data_len = 2+2+1+len(flags)+1+len(service)+1+len(regex)+len(replacement)
              buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)  ## Name
              buffer += getTypeBin("NAPTR") + getClassBin("IN")
              buffer += struct.pack(">L", resp.TTL)     ## TTL
              buffer += struct.pack(">H", data_len)     ## Data length (2B)
              buffer += struct.pack(">H", order)        ## Order (2B)
              buffer += struct.pack(">H", pref)         ## Preference (2B)
              buffer += struct.pack(">B", len(flags))   ## Flags Length (1B)
              buffer += flags                           ## Flags
              buffer += struct.pack(">B", len(service)) ## Service Length (1B)
              buffer += service                         ## Service
              buffer += struct.pack(">B", len(regex))   ## Regex Length (1B)
              buffer += regex                           ## Regex
              buffer += replacement                     ## Replacement
              # log and send
              log("NAPTR ENUM loop %s" % (req.full_domain_20))
              send_buf(self, buffer)
              #####################################################################
'''
