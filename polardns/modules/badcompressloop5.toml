[module]
name = "badcompressloop5"
type = "feature"
info = "Pointer Loop in CNAME Field (Variant 2)"
short = "Compression pointer loop in the CNAME field (variant 2)"
category = "Bad compression"
records = "CNAME"
rfc = "RFC1035"
desc = '''
The DNS protocol supports compressing domain names to save space by reducing redundancy for repeated domain names within DNS messages. This compression scheme can be applied to various record (resource) types, such as **A**, **CNAME**, **MX**, or **PTR** records.

This particular module is designed to respond with a single answer containing a **CNAME record** (alias) where the **CNAME field** is partially compressed.

The **CNAME field** includes only the `abc` string (a beginning of a domain name) followed by a compression pointer that points back to the beginning of the `abc` string.

This setup effectively creates a **loop**, preventing it from being assembled into a valid domain name.
'''
format = '''
**`badcompressloop5.yourdomain.com`**

This module has no parameters.
'''
seealso = "badcompress1, badcompress2, badcompressfwptr1, badcompressfwptr2, badcompressloop1, badcompressloop2, badcompressloop3, badcompressloop4, badcompressloop5, badcompressmid1"

[[module.example]]
description = "In this example, we can see that the client (dig) is unable to process the response because of the compression loop:"
command = "dig badcompressloop5.yourdomain.com @127.0.0.1"
append = "By examining the PCAP file in Wireshark, we can see that it detects the loop and displays the error message `<Name contains a pointer that loops>` while parsing the field. However, different DNS resolvers and clients may handle such malformed responses in vastly different ways, making this an intriguing use case for testing."

[[module.example]]
description = "Like other features, you can append anything to the feature name to avoid receiving cached responses from the target DNS resolver. This forces the target resolver to actively communicate with our PolarDNS server instead of responding with cached answers. Using a random number is the most effective strategy:"
command = "dig badcompressloop5${RANDOM}.yourdomain.com @10.211.55.2"

[module.code]
python = '''
if req.first_subdomain.startswith("badcompressloop5"):
   # Send answer with a compression pointer loop in the CNAME - variant 2
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # CNAME
   buffer += b"\xc0\x0c" + getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   offset_to_last_cname = len(req.full_domain) + 12 + 18     ## forward pointer to the CNAME in the end
   dom = b"\x03abc" + b"\xc0" + struct.pack(">B", offset_to_last_cname)
   buffer += struct.pack(">H", len(dom))                ## Data length
   buffer += dom                                        ## CNAME value with pointer to itself
   # log and send
   log("CNAME abc<LOOP> (badcomp loop 5 in CNAME)")
   send_buf(self, buffer)
   #####################################################################
'''
