[module]
name = "cnalias"
type = "feature"
info = "Random CNAME Aliases"
short = "CNAME random alias generator"
category = "Aliases"
records = "CNAME"
tags = "Amplification, Domain Lock-Up, Denial of Service"
rfc = "RFC1034"
desc = '''
This module is designed to return one or more **random aliases** using **CNAME (Canonical Name)** records.

It specifically generates a random CNAME alias record in the format `cnalias######.yourdomain.com`, where `######` represents a random number.

The idea is that if the client/resolver decides to resolve this further, it will result in the generation of yet another alias, theoretically leading to a resolution of infinite chain of random aliases. In practice, however, most modern resolvers will terminate the resolution after encountering several consecutive alias records.

Note that this feature provides the same functionality as requesting the CNAME record for the generic [alias] feature. Responding with multiple records (aliases) in a single response is also supported.

:warning:**BEWARE**:warning:This can potentially lead to amplification effect (DoS) or domain lock-up (DoS).
'''
format = '''
**`cnalias.<NUMBER>.yourdomain.com`**

Where:

- The **`<NUMBER>`** parameter defines how many aliases should be generated in the response.
'''
seealso = "cnloop, cnchain, alias, cnalias, dnalias, htalias, mxalias, nptenumalias, nsalias, ptralias, spfalias1, spfalias2, sralias, svalias"

[[module.example]]
description = "By default, it returns a single CNAME alias:"
command = "dig cnalias.yourdomain.com @127.0.0.1"

[[module.example]]
description = "Same example as above, but this time we explicitly specify that we want to receive a single CNAME record:"
command = "dig cnalias.1.yourdomain.com @127.0.0.1"

[[module.example]]
description = "In this case, we specify that we want to receive five CNAME aliases:"
command = "dig cnalias.5.yourdomain.com @127.0.0.1"

[module.code]
python = '''
           elif req.first_subdomain.startswith("cnalias"):
              # Send multiple random CNAME aliases
              # BEWARE: This could result in multiplication
              answers = min(int(req.subdomains[1]), 4096) if req.subdomains[1].isnumeric() else 1
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, answers, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain_20) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              doms = []
              for i in range(answers):
                  # CNAME
                  dom = name_fuzz(resp.nfz) if hasattr(resp, "nfz") else random_chain()
                  bindom = convDom2Bin(dom)
                  buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain_20)
                  buffer += getTypeBin("CNAME") + getClassBin("IN")
                  buffer += struct.pack(">L", resp.TTL)      ## TTL
                  buffer += struct.pack(">H", len(bindom))   ## Data length
                  buffer += bindom                           ## CNAME value
                  doms.append(dom)
              # log and send
              log("%d CNAME aliases: %s" % (answers, ', '.join(map(str, doms[:3])) + (', ...' if answers > 3 else '')))
              send_buf(self, buffer)
              #####################################################################
'''
